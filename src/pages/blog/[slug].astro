---
import Badge from '@components/ui/Badge.astro'
import Button from '@components/ui/Button.astro';
import Layout from '@layouts/Layout.astro';
import Prose from '@components/ui/Prose.astro';
import { getAllPosts, getPostBySlug } from '@lib/content/posts.ts';
import Link from '@components/ui/Link.astro';

type SlugProps = {
  slug: string;
}

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params as SlugProps;
const post = await getPostBySlug(slug!);
if (!post) throw new Error(`Post not found: ${slug}`);

const url = new URL(Astro.request.url, Astro.site).toString();
const {
  title,
  description,
  publishedAt,
  tags,
  cover,
  readingTimeMinutes,
  Content,
} = post;

const allPosts = await getAllPosts();
const index = allPosts.findIndex(p => p.slug === slug);
const prevPost = allPosts[index + 1] || null;
const nextPost = allPosts[index - 1] || null;
---

<Layout title={title} description={description} url={url} image={cover}>
  <article>
    <header class="mb-8">
      <h1 class="text-3xl font-bold">{title}</h1>
      <div class="mt-2 text-sm opacity-70">
        {publishedAt && new Date(publishedAt).toLocaleDateString()} • {readingTimeMinutes ?? '–'} min read
      </div>
      {tags?.length && (
        <div class="mt-3 flex flex-wrap gap-2">
          {tags.map((tag: string) => (
            <Badge variant="neutral">#{tag}</Badge>
          ))}
        </div>
      )}
      {cover && (
        <img
          src={cover}
          alt={title}
          class="mt-4 rounded-2xl shadow-soft w-full aspect-[16/9] object-cover"
          loading="lazy"
        />
      )}
    </header>
    <nav id="toc-container" class="mb-8 border-l-4 border-muted pl-4"></nav>
    <Prose>
      <Content />
    </Prose>
    <div class="mt-12 flex justify-between">
      <div>
        {prevPost && (
          <div>
            <span class="block text-sm opacity-70 mb-1">Previous</span>
            <a href={`/blog/${prevPost.slug}`} class="text-primary hover:underline">
              {prevPost.title}
            </a>
          </div>
        )}
      </div>
      <div class="text-right">
        {nextPost && (
          <div>
            <span class="block text-sm opacity-70 mb-1">Next</span>
            <a href={`/blog/${nextPost.slug}`} class="text-primary hover:underline">
              {nextPost.title}
            </a>
          </div>
        )}
      </div>
    </div>
    <div class="mt-10 text-center">
      <Link variant="ghost" url="/blog">← Back to Blog</Link>
    </div>
  </article>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const progressBar = document.getElementById('progress-bar');
    const article = document.querySelector('article');
    function updateProgress() {
      if (!article || !progressBar) return;
      const totalHeight = article.offsetHeight - window.innerHeight;
      const scrolled = Math.max(0, window.scrollY - article.offsetTop);
      const progress = totalHeight > 0 ? (scrolled / totalHeight) * 100 : 0;
      progressBar.style.width = progress + '%';
    }
    window.addEventListener('scroll', updateProgress);
    updateProgress();

    const tocContainer = document.getElementById('toc-container');
    const headings = Array.from(article!.querySelectorAll('h2, h3'));
    if (headings.length > 0) {
      const titleEl = document.createElement('h2');
      titleEl.textContent = 'Table of contents';
      titleEl.className = 'text-base font-semibold mb-2';
      tocContainer!.appendChild(titleEl);
      const list = document.createElement('ul');
      list.className = 'space-y-1';
      headings.forEach(h => {
        const level = parseInt(h.tagName.substring(1), 10);
        if (!h.id) {
          h.id = h.textContent.trim().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w-]/g, '');
        }
        const li = document.createElement('li');
        li.style.marginLeft = ((level - 2) * 1.5) + 'rem';
        const link = document.createElement('a');
        link.href = '#' + h.id;
        link.textContent = h.textContent.trim();
        link.className = 'text-sm text-primary hover:underline';
        li.appendChild(link);
        list.appendChild(li);
      });
      tocContainer!.appendChild(list);
    }
  });
</script>
